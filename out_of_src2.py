'''
ID data: AndroZoo
OOD data: Drebin
'''
from tools import utils
import numpy as np
from learner import model_scope_dict
targeted_model_names_dict = model_scope_dict.copy()
targeted_model_name = 'basic_dnn'
targeted_model = targeted_model_names_dict[targeted_model_name](mode='test')

# load AndroZoo data
androX_path = '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/derbin/X.pkl'
androy_path = '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/derbin/y.pkl'
_, _, testX_andro = utils.read_joblib(androX_path)
_, _, testy_andro = utils.read_joblib(androy_path)

# load Drebin data
drebinX_path = '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/drebin/drebin/X.pkl'
drebiny_path = '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/drebin/drebin/y.pkl'
_, _, testX_drebin = utils.read_joblib(drebinX_path)
_, _, testy_drebin = utils.read_joblib(drebiny_path)

# split test data into candidate & new test
size = 4000
candidate_andro_idx = np.random.choice(np.arange(len(testX_andro)), size=size, replace=False)
candidate_drebin_idx = np.random.choice(np.arange(len(testX_drebin)), size=size, replace=False)

can_andro, can_androy = testX_andro[candidate_andro_idx], testy_andro[candidate_andro_idx] # (4000,10000)
can_drebin, can_drebiny = testX_drebin[candidate_drebin_idx], testy_drebin[candidate_drebin_idx]

test_andro, test_androy = np.delete(testX_andro, candidate_andro_idx, axis=0)[:size], np.delete(testy_andro, candidate_andro_idx)[:size]
test_drebin, test_drebiny = np.delete(testX_drebin, candidate_drebin_idx, axis=0)[:size], np.delete(testy_drebin, candidate_drebin_idx)[:size]

# construct candidate set and new test set based on diff dist.
id_dist = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
#ood_dist = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]
for id_ratio in id_dist:
    id_size = int(can_andro.shape[0]*id_ratio)
    id_feat_can, id_y_can = can_andro[:id_size], can_androy[:id_size]
    id_feat_test, id_y_test = test_andro[:id_size], test_androy[:id_size]  # new test set has the same dist as candidate set.

    ood_size = size-id_size
    ood_feat_can, ood_y_can = can_drebin[:ood_size], can_drebiny[:ood_size]
    ood_feat_test, ood_y_test = test_drebin[:ood_size], test_drebiny[:ood_size]

    hybrid_candidateX = np.concatenate((id_feat_can, ood_feat_can), axis=0)  # shape 4000,10000
    hybrid_candidatey = np.concatenate((id_y_can, ood_y_can), axis=0)

    hybrid_testX = np.concatenate((id_feat_test, ood_feat_test), axis=0)  # shape 4000,10000
    hybrid_testy = np.concatenate((id_y_test, ood_y_test), axis=0)

    # import pdb; pdb.set_trace()
    acc_pert = targeted_model.test_rpst(hybrid_testX, hybrid_testy, is_single_class=False)
