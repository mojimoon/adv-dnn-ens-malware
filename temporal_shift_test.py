from learner import model_scope_dict
from tools.utils import readdata_np
import numpy as np
import sys
import os
from config import config
import csv

model_name = 'deepdrebin'
# model_name = 'basic_dnn'

targeted_model_names_dict = model_scope_dict.copy()
targeted_model_name = 'basic_dnn'
targeted_model = targeted_model_names_dict[targeted_model_name](mode='test')

project_root = config.get('DEFAULT', 'project_root')
database_dir = config.get('DEFAULT', 'database_dir')

output_file = os.path.join(project_root, 'results', 'temporal_shift.csv')

datasets = [2018, 2019]

def write_to_csv(output_file, data):
    file_exists = os.path.isfile(output_file)
    with open(output_file, 'a') as csvfile:
        fieldnames = ['model', 'dataset', 'acc']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        if not file_exists:
            writer.writeheader()
        writer.writerow(data)

for dataset in datasets:
    testX = readdata_np(os.path.join(database_dir, 'ad{}'.format(dataset), 'feature', 'X.data'))
    testy = readdata_np(os.path.join(database_dir, 'ad{}'.format(dataset), 'feature', 'y.data'))
    acc = targeted_model.test_rpst(testX, testy, is_single_class=True)

    write_to_csv(output_file, {'model': model_name, 'dataset': dataset, 'acc': acc})