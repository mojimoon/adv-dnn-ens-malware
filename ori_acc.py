from learner import model_scope_dict
from tools import utils
import numpy as np
import sys
import logging
import os
import csv
from config import config

# model_name = 'deepdrebin'
model_name = 'basic_dnn'

class datastore:
    def __init__(self, X_path, y_path, file_type):
        self.X_path = X_path
        self.y_path = y_path
        self.file_type = file_type
        self.__load()
    
    def __load(self):
        if self.file_type == 'pkl':
            self.trainX, self.valX, self.testX = utils.read_joblib(self.X_path)
            self.trainy, self.valy, self.testy = utils.read_joblib(self.y_path)
            self.X, self.y = self.testX, self.testy
        else:
            self.X = utils.readdata_np(self.X_path)
            self.y = utils.readdata_np(self.y_path)

set_id = datastore( # 64007 + 21336 + 21336
    '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/derbin/X.pkl',
    '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/derbin/y.pkl',
    'pkl'
)

set_ood = {
    'drebin': datastore( # 28683 + 9562 + 9562
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/drebin/drebin/X.pkl',
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/drebin/drebin/y.pkl',
        'pkl'
    ),
    'ad2018': datastore( # 8367
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/2018/feature/X.data',
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/2018/feature/y.data',
        'data'
    ),
    'ad2019': datastore( # 8076
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/2019/feature/X.data',
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/2019/feature/y.data',
        'data'
    )
}

size = 4000

id_idx = np.random.choice(np.arange(len(set_id.X)), size=size, replace=False)
can_idX, can_idy = set_id.X[id_idx], set_id.y[id_idx]
test_idX, test_idy = np.delete(set_id.X, id_idx, axis=0)[:size], np.delete(set_id.y, id_idx)[:size]

ood_idx = []
can_oodX, can_oody = [], []
test_oodX, test_oody = [], []

for i, ood in enumerate(set_ood):
    ood_idx.append(np.random.choice(np.arange(len(set_ood[ood].X)), size=size, replace=False))
    can_oodX.append(set_ood[ood].X[ood_idx[i]])
    can_oody.append(set_ood[ood].y[ood_idx[i]])
    test_oodX.append(np.delete(set_ood[ood].X, ood_idx[i], axis=0)[:size])
    test_oody.append(np.delete(set_ood[ood].y, ood_idx[i])[:size])

targeted_model_names_dict = model_scope_dict.copy()
targeted_model_name = 'basic_dnn'
targeted_model = targeted_model_names_dict[targeted_model_name](mode='test')

project_root = config.get('DEFAULT', 'project_root')
database_dir = config.get('DEFAULT', 'database_dir')

output_file = os.path.join(project_root, 'results', 'ori_acc.csv')

def write_to_csv(outputfile, data):
    file_exists = os.path.isfile(outputfile)
    with open(outputfile, 'a') as csvfile:
        fieldnames = ['model', 'ood', 'id_ratio', 'ori_acc']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        if not file_exists:
            writer.writeheader()
        writer.writerow(data)

def main():
    for i, ood in enumerate(set_ood):
        for id_ratio in np.arange(0, 1.1, 0.1):
            id_size = int(size * id_ratio)
            id_feat_test, id_y_test = test_idX[:id_size], test_idy[:id_size]

            ood_size = size - id_size
            ood_feat_test, ood_y_test = test_oodX[i][:ood_size], test_oody[i][:ood_size]
            
            hybrid_testX = np.concatenate((id_feat_test, ood_feat_test), axis=0)
            hybrid_testy = np.concatenate((id_y_test, ood_y_test), axis=0)

            ori_acc = targeted_model.test_rpst(testX=hybrid_testX, testy=hybrid_testy, is_single_class=True)
            write_to_csv(output_file, {'model': model_name, 'ood': ood, 'id_ratio': id_ratio, 'ori_acc': ori_acc * 100})

if __name__ == '__main__':
    main()