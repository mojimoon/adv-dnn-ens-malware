import xlsxwriter
import os
import pandas as pd

pwd = os.path.dirname(os.path.abspath(__file__))
root = os.path.dirname(pwd)

workbook = xlsxwriter.Workbook('results/aggregated/result_androzoo.xlsx')

merged_style = workbook.add_format({
    'align': 'center',
    'valign': 'vcenter',
})

id_ratio = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]

def get_mean(df, filters, key='acc_improvement'):
    # print(filters)
    for k, v in filters.items():
        df = df[df[k] == v]
    if not df.empty:
        return df[key].mean()
    else:
        return -1

def report_retrain_selected():
    srcs = [
        os.path.join(root, 'results', 'retrain', 'retrain_deepdrebin_type1_hybrid.csv'),
        os.path.join(root, 'results', 'retrain', 'retrain_deepdrebin_type1_original.csv'),
        os.path.join(root, 'results', 'retrain', 'retrain_deepdrebin_type2_hybrid.csv'),
        os.path.join(root, 'results', 'retrain', 'retrain_deepdrebin_type2_original.csv'),
    ]

    dfs = [pd.read_csv(src) for src in srcs]

    df = pd.concat(dfs, axis=0, ignore_index=True)

    columns = [
        *[{'selection_metric': _m, 'budget': _b} for _m in ['random', 'gd', 'deepgini', 'entropy', 'dat'] for _b in [0.05, 0.1, 0.2, 0.3]],
        {'selection_metric': 'none', 'budget': 1.0},
    ]

    id_ratio = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]

    methods = ['fgsm', 'GDKDE', 'MIMICRY', 'POINTWISE']

    for test_set in ['hybrid', 'original']:
        worksheet = workbook.add_worksheet("adv-samples-{}".format(test_set))

        r = 0

        for method in methods:
            # Epoch=30, {method} adv samples
            worksheet.merge_range(r, 0, r, 1, 'Type 1: Epoch=30', merged_style)
            worksheet.merge_range(r, 2, r, 3, 'Type 2: Epoch=10', merged_style)
            worksheet.merge_range(r, 4, r, 5, '{} adv samples'.format(method), merged_style)
            r += 1

            # Deepdrebin, (8) Deepgini, (8) Entropy, (8) DAT, (2) No selection metric
            worksheet.write(r, 0, 'Deepdrebin')
            worksheet.merge_range(r, 1, r, 8, 'Random', merged_style)
            worksheet.merge_range(r, 9, r, 16, 'Geometric Diversity', merged_style)
            worksheet.merge_range(r, 17, r, 24, 'Deepgini', merged_style)
            worksheet.merge_range(r, 25, r, 32, 'Entropy', merged_style)
            worksheet.merge_range(r, 33, r, 40, 'DAT', merged_style)
            worksheet.merge_range(r, 41, r, 42, 'No selection metric needed', merged_style)
            r += 1

            # (2) bg={budget} for each column
            for i, col in enumerate(columns):
                worksheet.merge_range(r, i*2+1, r, i*2+2, 'bg={}'.format(col['budget']), merged_style)
            r += 1

            # ID ratio, (Type 1, Type 2) for each column
            worksheet.write(r, 0, 'ID ratio')
            for i, col in enumerate(columns):
                worksheet.write(r, i*2+1, 'Type 1')
                worksheet.write(r, i*2+2, 'Type 2')
            r += 1
            
            # table body
            for j, idr in enumerate(id_ratio):
                worksheet.write(r, 0, idr)
                for i, col in enumerate(columns):
                    type1_filter = {
                        'retrain_type': 'type1',
                        'test_set': test_set,
                        'method': method,
                        'selection_metric': (idr == 1.0 and col['selection_metric'] == 'dat') and 'deepgini' or col['selection_metric'],
                        'epochs': 30,
                        'budget': col['budget'],
                        'id_ratio': idr
                    }

                    type2_filter = {
                        'retrain_type': 'type2',
                        'test_set': test_set,
                        'method': method,
                        'selection_metric': (idr == 1.0 and col['selection_metric'] == 'dat') and 'deepgini' or col['selection_metric'],
                        'epochs': 10,
                        'budget': col['budget'],
                        'id_ratio': idr
                    }

                    _type1 = get_mean(df, type1_filter)
                    if _type1 != -1:
                        worksheet.write(r, i*2+1, _type1)

                    _type2 = get_mean(df, type2_filter)
                    if _type2 != -1:
                        worksheet.write(r, i*2+2, _type2)
                r += 1

            # empty line
            r += 1

def report_retrain_outofsrc():
    srcs = [
        os.path.join(root, 'results', 'retrain', 'retrain_outofsrc_deepdrebin_type1_hybrid.csv'),
        os.path.join(root, 'results', 'retrain', 'retrain_outofsrc_deepdrebin_type1_original.csv'),
        os.path.join(root, 'results', 'retrain', 'retrain_outofsrc_deepdrebin_type2_hybrid.csv'),
        os.path.join(root, 'results', 'retrain', 'retrain_outofsrc_deepdrebin_type2_original.csv'),
    ]

    dfs = []

    for src in srcs:
        df = pd.read_csv(src)
        filename = os.path.basename(src)
        parts = filename.split('_')
        df['retrain_type'] = parts[3]
        df['test_set'] = parts[4].split('.')[0]
        dfs.append(df)

    df = pd.concat(dfs, axis=0, ignore_index=True)

    columns = [
        *[{'selection_metric': _m, 'budget': _b} for _m in ['deepgini', 'entropy', 'dat'] for _b in [0.01, 0.03, 0.05, 0.1]],
        {'selection_metric': 'none', 'budget': 1.0},
    ]

    oods = ['drebin', 'ad2018', 'ad2019']

    ood_dict = {
        'drebin': 'DeepDrebin',
        'ad2018': 'AndroZoo 2018',
        'ad2019': 'AndroZoo 2019',
    }

    for test_set in ['hybrid', 'original']:
        worksheet = workbook.add_worksheet("out-of-source-{}".format(test_set))

        r = 0

        for ood in oods:
            worksheet.merge_range(r, 0, r, 1, 'Type 1: Epoch=30', merged_style)
            worksheet.merge_range(r, 2, r, 3, 'Type 2: Epoch=10', merged_style)
            worksheet.merge_range(r, 4, r, 5, 'ID=AndroZoo 2017', merged_style)
            worksheet.merge_range(r, 6, r, 7, 'OOD={}'.format(ood_dict[ood]), merged_style)
            r += 1

            # Deepdrebin, (8) Deepgini, (8) Entropy, (8) DAT, (2) No selection metric
            worksheet.write(r, 0, 'Deepdrebin')
            worksheet.merge_range(r, 1, r, 8, 'Deepgini', merged_style)
            worksheet.merge_range(r, 9, r, 16, 'Entropy', merged_style)
            worksheet.merge_range(r, 17, r, 24, 'DAT', merged_style)
            worksheet.merge_range(r, 25, r, 26, 'No selection metric needed', merged_style)
            r += 1

            # (2) bg={budget} for each column
            for i, col in enumerate(columns):
                worksheet.merge_range(r, i*2+1, r, i*2+2, 'bg={}'.format(col['budget']), merged_style)
            r += 1

            # ID ratio, (Type 1, Type 2) for each column
            worksheet.write(r, 0, 'ID ratio')
            for i, col in enumerate(columns):
                worksheet.write(r, i*2+1, 'Type 1')
                worksheet.write(r, i*2+2, 'Type 2')
            r += 1
            
            # table body
            for j, idr in enumerate(id_ratio):
                worksheet.write(r, 0, idr)
                for i, col in enumerate(columns):
                    type1_filter = {
                        'retrain_type': 'type1',
                        'test_set': test_set,
                        'ood': ood,
                        'selection_metric': (idr == 1.0 and col['selection_metric'] == 'dat') and 'deepgini' or col['selection_metric'],
                        'epochs': 30,
                        'budget': col['budget'],
                        'id_ratio': idr
                    }

                    type2_filter = {
                        'retrain_type': 'type2',
                        'test_set': test_set,
                        'ood': ood,
                        'selection_metric': (idr == 1.0 and col['selection_metric'] == 'dat') and 'deepgini' or col['selection_metric'],
                        'epochs': 10,
                        'budget': col['budget'],
                        'id_ratio': idr
                    }

                    _type1 = get_mean(df, type1_filter)
                    if _type1 != -1:
                        worksheet.write(r, i*2+1, _type1)

                    _type2 = get_mean(df, type2_filter)
                    if _type2 != -1:
                        worksheet.write(r, i*2+2, _type2)
                r += 1

            # empty line
            r += 1

def report_ori_acc():
    src = os.path.join(root, 'results', 'ori_acc.csv')

    df = pd.read_csv(src)

    df['id_ratio'] = df['id_ratio'].apply(lambda x: round(x, 1))

    oods = ['drebin', 'ad2018', 'ad2019']

    ood_dict = {
        'drebin': 'DeepDrebin',
        'ad2018': 'AndroZoo 2018',
        'ad2019': 'AndroZoo 2019',
    }

    for model in ['deepdrebin', 'basic_dnn']:
        worksheet = workbook.add_worksheet("original-acc-{}".format(model))

        r = 0

        worksheet.write(r, 0, model)

        r += 1

        worksheet.write(r, 0, 'ID Ratio')
        for i, ood in enumerate(oods):
            worksheet.write(r, i + 1, ood_dict[ood])

        r += 1

        for idr in id_ratio:
            worksheet.write(r, 0, idr)
            for i, ood in enumerate(oods):
                filters = {
                    'model': model,
                    'ood': ood,
                    'id_ratio': idr
                }
                mean = get_mean(df, filters, "ori_acc")
                worksheet.write(r, i + 1, mean)

            r += 1

def main():
    report_retrain_selected()
    report_retrain_outofsrc()
    report_ori_acc()

    workbook.close()

if __name__ == '__main__':
    main()
