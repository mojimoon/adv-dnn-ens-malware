from config import config
import os
import shutil
from learner.feature_extractor import get_droid_feature, FeatureMapping
from tools import utils

feature_tp = 'drebin'

def feature_extraction(apk_paths, is_ordering=True):
    """
    feature extraction
    @param apk_paths: the list of applications
    @param is_ordering: return the list of features corresponds to the apk_paths
    """
    feature_save_dir = os.path.join("/tmp", "apk_data")

    # if os.path.exists(feature_save_dir):
    #     shutil.rmtree(feature_save_dir, ignore_errors=True)

    # get_droid_feature(apk_paths, feature_save_dir, feature_type=feature_tp)
    feature_mapping = FeatureMapping(feature_save_dir, feature_type=feature_tp)
    if is_ordering:

        feature = feature_mapping.preprocess_feature(is_ordering, apk_paths)

    else:

        feature = feature_mapping.preprocess_feature()

    vocab_path = config.get('override', 'androzoo_vocab')
    if not os.path.exists(vocab_path):
        logger.error("No vocabulary.")
        return np.array([])
    vocab = utils.read_pickle(os.path.join(vocab_path))

    # if self.feature_mp == 'count':
    #     return feature_mapping.count_feature_mapping_normalized(vocab, feature)
    # else:
    return feature_mapping.binary_feature_mapping_normalized(vocab, feature)

def main():
    feature_saved_path = config.get('override', 'ad2019_feature')
    attack_path = os.path.join(config.get('dataset', 'dataset_root'), config.get('dataset', 'malware_dir_name'))
    benign_path = os.path.join(config.get('dataset', 'dataset_root'), config.get('dataset', 'benware_dir_name'))
    apk_paths = [os.path.join(attack_path, apk) for apk in os.listdir(attack_path)] + [os.path.join(benign_path, apk) for apk in os.listdir(benign_path)]

    vectors = feature_extraction(apk_paths, is_ordering=True)
    utils.dumpdata_np(vectors, feature_saved_path)

if __name__ == '__main__':
    main()
