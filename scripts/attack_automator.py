# python 2.7

attackers = [
    'fgsm',
    # 'pgdlinf',
    # 'pgdl2',
    # 'pgdl1',
    # 'pgd_adam',
    # 'gdkde',
    # 'bca_k',
    # 'bga_k', 
    # 'grosse',
    # 'jsma',
    # 'max',
    # 'mimicry',
    # 'pointwise',
    # 'saltandpepper',
]

model = 'b_dnn'
model_internal = 'basic_dnn'
dataset = 'ad2019'

import os
import csv

pwd = os.getcwd()
root = os.path.dirname(pwd)
results = os.path.join(root, 'results')
logs = os.path.join(results, 'logs')

if dataset:
    logs = os.path.join(results, dataset, 'logs')
    results = os.path.join(results, dataset)

def extract_metrics(log_file):
    with open(log_file, 'r') as f:
        lines = f.readlines()

    # Start from the end of the file
    metrics = {}
    for line in reversed(lines):
        if 'average l0 norm' in line:
            metrics['l0_norm'] = float(line.split()[-1])
            break
        elif 'average l1 norm' in line:
            metrics['l1_norm'] = float(line.split()[-1])
        elif 'average l2 norm' in line:
            metrics['l2_norm'] = float(line.split()[-1])
        elif 'Accuracy on perturbed features:' in line:
            metrics['test_accuracy'] = float(line.split()[-1].rstrip(')'))

    return metrics

def write_to_csv(output_file, data):
    file_exists = os.path.isfile(output_file)

    with open(output_file, 'a') as csvfile:
        fieldnames = ['attacker', 'l0_norm', 'l1_norm', 'l2_norm', 'test_accuracy']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        if not file_exists:
            writer.writeheader()  # Write header only if file doesn't exist
        writer.writerow(data)

output_file = os.path.join(results, '{}.csv'.format(model))

for attacker in attackers:
    if not os.path.exists(os.path.join(logs, model)):
        os.makedirs(os.path.join(logs, model))
    cmd = 'python {}/main.py attacker -v {} -m {} > {}/{}/{}.txt'.format(root, model_internal, attacker, logs, model, attacker)
    print(cmd)
    os.system(cmd)

    log_file = os.path.join(logs, model, '{}.txt'.format(attacker))
    metrics = extract_metrics(log_file)
    metrics['attacker'] = attacker
    write_to_csv(output_file, metrics)

print('Done')
