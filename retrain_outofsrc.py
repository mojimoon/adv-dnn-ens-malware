from learner import model_scope_dict
from tools import utils
import numpy as np
import sys
import logging
import os
import csv
from config import config

# begin config

tests = [
    {
        'selection_metric': ['entropy', 'deepgini', 'dat'],
        'budget': [0.01, 0.03, 0.05, 0.1],
        'id_ratio': [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
    },
    {
        'selection_metric': ['entropy', 'deepgini'],
        'budget': [0.01, 0.03, 0.05, 0.1],
        'id_ratio': [1.0]
    }
]

model_name = 'deepdrebin'
retrain_type = 'type1'
test_set = 'hybrid'

# end config

TYPE1 = 'type1'
TYPE2 = 'type2'
HYBRID = 'hybrid'
ORIGINAL = 'original'
DEEPDREBIN = 'deepdrebin'
BASIC_DNN = 'basic_dnn'

class datastore:
    def __init__(self, X_path, y_path, file_type):
        self.X_path = X_path
        self.y_path = y_path
        self.file_type = file_type
        self.__load()
    
    def __load(self):
        if self.file_type == 'pkl':
            self.trainX, self.valX, self.testX = utils.read_joblib(self.X_path)
            self.trainy, self.valy, self.testy = utils.read_joblib(self.y_path)
            self.X, self.y = self.testX, self.testy
        else:
            self.X = utils.readdata_np(self.X_path)
            self.y = utils.readdata_np(self.y_path)

set_id = datastore( # 64007 + 21336 + 21336
    '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/derbin/X.pkl',
    '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/derbin/y.pkl',
    'pkl'
)

set_ood = {
    'drebin': datastore( # 28683 + 9562 + 9562
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/drebin/drebin/X.pkl',
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/drebin/drebin/y.pkl',
        'pkl'
    ),
    'ad2018': datastore( # 4100
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/2018/feature/feature_2018.data',
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/2018/feature/label_2018.data',
        'data'
    ),
    'ad2019': datastore( # 4495
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/2019/feature/feature_2019.data',
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/2019/feature/label_2019.data',
        'data'
    )
}

targeted_model_names_dict = model_scope_dict.copy()
targeted_model_name = 'basic_dnn'
targeted_model = targeted_model_names_dict[targeted_model_name](mode='test')

project_root = config.get('DEFAULT', 'project_root')
log_path = os.path.join(project_root, 'results', 'retrain', 'retrain_outofsrc_{}_{}_{}.csv'.format(model_name, retrain_type, test_set))

def write_to_csv(outputfile, data):
    file_exists = os.path.isfile(outputfile)
    with open(outputfile, 'a') as csvfile:
        fieldnames = ['selection_metric', 'ood', 'epochs', 'id_ratio', 'budget', 'original_acc', 'retrain_acc', 'acc_improvement']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        if not file_exists:
            writer.writeheader()
        writer.writerow(data)

size = 4000

id_idx = np.random.choice(np.arange(len(set_id.X)), size=size, replace=False)
can_idX, can_idy = set_id.X[id_idx], set_id.y[id_idx]
test_idX, test_idy = np.delete(set_id.X, id_idx, axis=0)[:size], np.delete(set_id.y, id_idx)[:size]