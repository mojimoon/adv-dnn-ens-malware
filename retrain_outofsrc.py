from learner import model_scope_dict
from tools import utils
import numpy as np
import sys
import logging
import os
import csv

# begin config

tests = [
    {
        'selection_metric': ['entropy', 'deepgini', 'dat'],
        'budget': [0.01, 0.03, 0.05, 0.1],
        'id_ratio': [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
    },
    {
        'selection_metric': ['entropy', 'deepgini'],
        'budget': [0.01, 0.03, 0.05, 0.1],
        'id_ratio': [1.0]
    }
]

# end config

class dataset_excerpt:
    def __init__(self, X_path, y_path, file_type):
        self.X_path = X_path
        self.y_path = y_path
        self.file_type = file_type
    
    def get_testX(self):
        if file_type == 'pkl':
            _, _, testX = utils.read_joblib(self.X_path)
            return testX
        elif file_type == 'data':
            return utils.readdata_np(self.X_path)
        else:
            raise NotImplementedError
    
    def get_trainX(self):
        if file_type == 'pkl':
            trainX, _, _ = utils.read_joblib(self.X_path)
            return trainX
        elif file_type == 'data':
            return utils.readdata_np(self.X_path)
        else:
            raise NotImplementedError
    
    def get_testy(self):
        if file_type == 'pkl':
            _, _, testy = utils.read_joblib(self.y_path)
            return testy
        elif file_type == 'data':
            return utils.readdata_np(self.y_path)
        else:
            raise NotImplementedError

    def get_trainy(self):
        if file_type == 'pkl':
            trainX, _, _ = utils.read_joblib(self.y_path)
            return trainX
        elif file_type == 'data':
            return utils.readdata_np(self.y_path)
        else:
            raise NotImplementedError

set_id = dataset_excerpt(
    '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/derbin/X.pkl',
    '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/derbin/y.pkl',
    'pkl'
)

set_ood = {
    'drebin': dataset_excerpt(
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/drebin/drebin/X.pkl',
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/drebin/drebin/y.pkl',
        'pkl'
    ),
    'ad2018': dataset_excerpt(
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/2018/feature/feature_2018.data',
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/2018/feature/label_2018.data',
        'data'
    ),
    'ad2019': dataset_excerpt(
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/2019/feature/feature_2019.data',
        '/home/jzhang2297/anomaly/malware/adversarial-deep-ensemble-droidmawlare/androzoo/2019/feature/label_2019.data',
        'data'
    )
}

targeted_model_names_dict = model_scope_dict.copy()
targeted_model_name = 'basic_dnn'
targeted_model = targeted_model_names_dict[targeted_model_name](mode='test')

def write_to_csv(outputfile, data):
    file_exists = os.path.isfile(outputfile)
    with open(outputfile, 'a') as csvfile:
        fieldnames = ['selection_metric', 'epochs', 'id_ratio', 'budget', 'original_acc', 'retrain_acc', 'acc_improvement']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        if not file_exists:
            writer.writeheader()
        writer.writerow(data)